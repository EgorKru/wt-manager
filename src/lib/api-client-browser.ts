"use client";

import { 
  API_BASE_URL, 
  API_VERSION
} from '@/config';
import { ACCESS_TOKEN_COOKIE, REFRESH_TOKEN_COOKIE } from '@/features/auth/constants';

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è cookie
function getCookie(name: string): string | null {
  if (typeof document === 'undefined') return null;
  const value = `; ${document.cookie}`;
  const parts = value.split(`; ${name}=`);
  if (parts.length === 2) return parts.pop()?.split(';').shift() || null;
  return null;
}

function setCookie(name: string, value: string, options: any = {}) {
  if (typeof document === 'undefined') return;
  
  let cookieString = `${name}=${value}`;
  
  if (options.maxAge) {
    cookieString += `; max-age=${options.maxAge}`;
  }
  
  if (options.path) {
    cookieString += `; path=${options.path}`;
  }
  
  if (options.secure) {
    cookieString += `; secure`;
  }
  
  if (options.sameSite) {
    cookieString += `; samesite=${options.sameSite}`;
  }
  
  document.cookie = cookieString;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage
function saveUserData(userData: any) {
  if (typeof localStorage !== 'undefined') {
    localStorage.setItem('user-data', JSON.stringify(userData));
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
function getUserData() {
  if (typeof localStorage !== 'undefined') {
    const data = localStorage.getItem('user-data');
    return data ? JSON.parse(data) : null;
  }
  return null;
}

// –ü—Ä–æ—Å—Ç–æ–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç
class BrowserAPIClient {
  private baseUrl: string;
  private refreshPromise: Promise<string | null> | null = null;
  private requestCache: Map<string, Promise<any>> = new Map();

  constructor(baseUrl: string) {
    this.baseUrl = baseUrl;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
  private async refreshToken(): Promise<string | null> {
    // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞, –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if (this.refreshPromise) {
      console.log('Refresh already in progress, waiting...');
      return this.refreshPromise;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π promise –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    this.refreshPromise = this.performTokenRefresh();
    
    try {
      const result = await this.refreshPromise;
      return result;
    } finally {
      // –û—á–∏—â–∞–µ–º promise –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      this.refreshPromise = null;
    }
  }

  private async performTokenRefresh(): Promise<string | null> {
    const refreshToken = getCookie(REFRESH_TOKEN_COOKIE);
    
    if (!refreshToken) {
      console.error('No refresh token available');
      return null;
    }

    try {
      const url = `${this.baseUrl}${API_VERSION}/auth/refresh`;
      console.log('Refreshing token at:', url);
      console.log('Refresh token:', refreshToken);
      
      const requestBody = { refreshToken };
      console.log('Request body:', requestBody);
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      console.log('Refresh response status:', response.status);
      
      if (!response.ok) {
        console.error('Failed to refresh token:', response.status);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
        try {
          const errorText = await response.text();
          console.error('Refresh error body:', errorText);
        } catch (e) {
          console.error('Could not read refresh error body');
        }
        
        return null;
      }

      const data = await response.json();
      console.log('Refresh response data:', data);
      
      if (data.accessToken) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π access token
        setCookie(ACCESS_TOKEN_COOKIE, data.accessToken, {
          maxAge: 60 * 60, // 1 —á–∞—Å
          path: '/',
          secure: false, // –¥–ª—è localhost
          sameSite: 'lax'
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º refresh token –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—à–µ–ª
        if (data.refreshToken) {
          setCookie(REFRESH_TOKEN_COOKIE, data.refreshToken, {
            maxAge: 60 * 60 * 24 * 7, // 7 –¥–Ω–µ–π
            path: '/',
            secure: false, // –¥–ª—è localhost
            sameSite: 'lax'
          });
        }
        
        console.log('Token refreshed successfully');
        return data.accessToken;
      }
      
      return null;
    } catch (error) {
      console.error('Error refreshing token:', error);
      return null;
    }
  }

  private async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    console.log('üöÄ REQUEST START:', endpoint);
    
    // –î–ª—è auth endpoints –Ω–µ —Ç—Ä–µ–±—É–µ–º —Ç–æ–∫–µ–Ω
    const isAuthEndpoint = endpoint.startsWith('/auth/');
    console.log('Making request to:', endpoint, 'isAuthEndpoint:', isAuthEndpoint);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ cookies –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ auth endpoint)
    if (!isAuthEndpoint) {
      console.log('All cookies:', document.cookie);
    }
    
    let accessToken: string | null = null;
    
    if (!isAuthEndpoint) {
      accessToken = getCookie(ACCESS_TOKEN_COOKIE);
      console.log('ACCESS_TOKEN_COOKIE name:', ACCESS_TOKEN_COOKIE);
      console.log('Access token from getCookie:', accessToken);

      if (!accessToken) {
        throw new Error("Unauthorized - no access token");
      }
    }

    const url = `${this.baseUrl}${API_VERSION}${endpoint}`;
    console.log('Full URL:', url);
    
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ headers –∏–∑ options
    if (options.headers) {
      Object.assign(headers, options.headers);
    }
    
    if (accessToken) {
      headers['Authorization'] = `Bearer ${accessToken}`;
    }
    
    console.log('Request headers:', headers);
    
    // –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å —Ç–µ–∫—É—â–∏–º —Ç–æ–∫–µ–Ω–æ–º
    let response = await fetch(url, {
      mode: 'cors',
      headers,
      ...options,
    });

    console.log('First response status:', response.status);

    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 401 –∏ —ç—Ç–æ –Ω–µ auth endpoint, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
    if (response.status === 401 && !isAuthEndpoint) {
      console.log('Got 401, attempting token refresh...');
      console.log('Access token expired, trying to refresh...');
      
      const newAccessToken = await this.refreshToken();
      
      if (newAccessToken) {
        console.log('Token refreshed successfully, retrying request...');
        console.log('New access token:', newAccessToken);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –≤ cookies
        const savedToken = getCookie(ACCESS_TOKEN_COOKIE);
        console.log('Token saved in cookies:', savedToken);
        console.log('Tokens match:', newAccessToken === savedToken);
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
        const newHeaders: Record<string, string> = {
          'Content-Type': 'application/json',
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ headers –∏–∑ options
        if (options.headers) {
          Object.assign(newHeaders, options.headers);
        }
        
        newHeaders['Authorization'] = `Bearer ${newAccessToken}`;
        console.log('Retrying request with headers:', newHeaders);
        
        response = await fetch(url, {
          mode: 'cors',
          headers: newHeaders,
          ...options,
        });
        
        console.log('Retry response status:', response.status);
      } else {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
        console.error('Failed to refresh token, redirecting to login');
        if (typeof window !== 'undefined') {
          window.location.href = '/sign-in';
        }
        throw new Error("Session expired");
      }
    }

    if (!response.ok) {
      console.error(`HTTP error! status: ${response.status}, url: ${url}`);
      console.error('Response headers:', Object.fromEntries(response.headers.entries()));
      
      // –ö–ª–æ–Ω–∏—Ä—É–µ–º response –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–µ–ª–∞ –æ—à–∏–±–∫–∏
      const clonedResponse = response.clone();
      try {
        const errorText = await clonedResponse.text();
        console.error('Error response body:', errorText);
      } catch (e) {
        console.error('Could not read error response body');
      }
      
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    return response.json();
  }

  async getCurrentUser() {
    const accessToken = getCookie(ACCESS_TOKEN_COOKIE);

    if (!accessToken) {
      throw new Error("Unauthorized - no access token");
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
    const savedUserData = getUserData();
    
    if (savedUserData) {
      return {
        id: savedUserData.id || 'temp-user-id',
        name: savedUserData.name || savedUserData.email || 'User',
        email: savedUserData.email || 'user@example.com',
        createdAt: savedUserData.createdAt || new Date().toISOString(),
      };
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return {
      id: 'temp-user-id',
      name: 'User',
      email: 'user@example.com',
      createdAt: new Date().toISOString(),
    };
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ
  saveUserLoginData(email: string, additionalData?: any) {
    const userData = {
      id: additionalData?.id || 'temp-user-id',
      name: additionalData?.name || email,
      email: email,
      createdAt: additionalData?.createdAt || new Date().toISOString(),
      ...additionalData
    };
    
    saveUserData(userData);
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
  async getUserProjects() {
    const cacheKey = 'getUserProjects';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è –∑–∞–ø—Ä–æ—Å
    if (this.requestCache.has(cacheKey)) {
      console.log('üîÑ getUserProjects: returning cached promise');
      return this.requestCache.get(cacheKey);
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const requestPromise = this.executeGetUserProjects();
    
    // –ö–µ—à–∏—Ä—É–µ–º promise
    this.requestCache.set(cacheKey, requestPromise);
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (—É—Å–ø–µ—à–Ω–æ–≥–æ –∏–ª–∏ —Å –æ—à–∏–±–∫–æ–π)
    requestPromise.finally(() => {
      this.requestCache.delete(cacheKey);
    });
    
    return requestPromise;
  }

  private async executeGetUserProjects() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º endpoint /projects/users-projects
    const url = `${this.baseUrl}${API_VERSION}/projects/users-projects`;
    console.log('üöÄ ACTUAL API CALL - Fetching projects from:', url);
    
    try {
      const projects = await this.request<any[]>('/projects/users-projects');
      console.log('Projects received:', projects);
      return projects;
    } catch (error) {
      console.error('Error fetching projects:', error);
      throw error;
    }
  }

  async createProject(data: { name: string; description?: string; [key: string]: any }) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º endpoint /projects/create-project
    return this.request<any>('/projects/create-project', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async getProjects(workspaceId: string) {
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º getUserProjects
    return this.getUserProjects();
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
  async setProject(projectId: string) {
    console.log('Setting project:', projectId);
    
    try {
      const tasks = await this.request<any[]>(`/projects/set-project/${projectId}`, {
        method: 'POST',
      });
      console.log('Project set successfully, received tasks:', tasks);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ localStorage
      if (typeof localStorage !== 'undefined') {
        localStorage.setItem(`project-${projectId}-tasks`, JSON.stringify(tasks));
        localStorage.setItem('current-project-id', projectId);
      }
      
      return tasks;
    } catch (error) {
      console.error('Error setting project:', error);
      throw error;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ localStorage
  async getProjectTasks(projectId: string) {
    if (typeof localStorage !== 'undefined') {
      const savedTasks = localStorage.getItem(`project-${projectId}-tasks`);
      if (savedTasks) {
        const tasks = JSON.parse(savedTasks);
        console.log('Getting tasks from localStorage for project:', projectId, tasks);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ API –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const transformedTasks = tasks.map((task: any) => ({
          $id: task.id,
          name: task.title,
          status: task.status, // TODO, IN_PROGRESS, REVIEW, DONE
          workspaceId: 'default-workspace',
          assigneeId: task.assignee,
          projectId: task.projectId,
          position: 1000, // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
          dueDate: task.creationDate, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–∫ dueDate
          description: task.description,
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          priority: task.priority,
          creator: task.creator,
          taskType: task.taskType,
          estimation: task.estimation,
          code: task.code,
          creationDate: task.creationDate,
          updateDate: task.updateDate,
          // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
          project: {
            $id: task.projectId,
            name: 'Current Project', // –ó–∞–≥–ª—É—à–∫–∞
            imageUrl: '',
          },
          assignee: {
            $id: task.assignee,
            name: 'User', // –ó–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ø–æ–∑–∂–µ
            email: 'user@example.com',
          },
        }));
        
        return transformedTasks;
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    return [];
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
  async updateTaskStatus(code: string, status: string) {
    console.log('üéØ UPDATE TASK STATUS CALLED:', { code, status });
    console.log('Updating task status:', { code, status });
    
    try {
      const result = await this.request<any>('/task/update-status', {
        method: 'PUT',
        body: JSON.stringify({ code, status }),
      });
      console.log('Task status updated successfully:', result);
      return result;
    } catch (error) {
      console.error('Error updating task status:', error);
      throw error;
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ (–∑–∞–≥–ª—É—à–∫–∏ –ø–æ–∫–∞)
  async getTasks(projectId: string) {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –±—É–¥—É—Ç endpoints
    return this.request<any>(`/projects/${projectId}/tasks`);
  }

  // Auth –º–µ—Ç–æ–¥—ã
  async login(username: string, password: string) {
    const response = await this.request<{ accessToken: string; refreshToken: string }>(
      '/auth/login',
      {
        method: 'POST',
        body: JSON.stringify({ username, password }),
      }
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ cookies
    if (response.accessToken) {
      setCookie(ACCESS_TOKEN_COOKIE, response.accessToken, {
        maxAge: 60 * 60, // 1 —á–∞—Å
        path: '/',
        secure: false, // –¥–ª—è localhost
        sameSite: 'lax'
      });
    }

    if (response.refreshToken) {
      setCookie(REFRESH_TOKEN_COOKIE, response.refreshToken, {
        maxAge: 60 * 60 * 24 * 7, // 7 –¥–Ω–µ–π
        path: '/',
        secure: false, // –¥–ª—è localhost
        sameSite: 'lax'
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.saveUserLoginData(username, { username });

    return response;
  }
}

export const browserApiClient = new BrowserAPIClient(API_BASE_URL); 